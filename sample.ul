// This file contains examples of various simple programming tasks and serves
// mainly to help flesh out the syntax and semantics of the language (and will
// later comprise practical documentation for various facilities it provides).
// It should be considered a very rough draft and all the constructs implied in
// these examples are subject to change.

// Defines a function (this is one of a handful of special functions that are
// handled at the implementation level)
fn (
		// The function name, an identifier/symbol (hence the quote)
		'primes,
		// Arguments to this function (is empty in this case)
		(),
		// The function body
		range ( 2 100 ) .map (
				n
				if (
						range( 2 n.sqrt().ceil() )
								.none( x n % x == 0 )
						println( n )
				)
		)
)
// Calls the function
primes()

"Performs function composition; can either be called with a pair of functions
(`f` and `g`) or a vector of functions. Will return a new function with the
same input type as the first function and the same output type as the second."
fn (
		compose,

		// this signature describes the version of `compose` that is dispatched
		// with two function inputs, `f` and `g`
		(f: Func<T, U>, g: Func<U, V> -> h: Func<T, V>) =>
				(args => g(f(args)))

		// there is an implicit requirement that `funcs[0]`'s output and
		// `funcs[1]`'s input have the same type, and so on
		(funcs: Vec<Func<T, U>; len > 0>) =>
				funcs.reduce(compose)
)

fn is-prime (n: int) => range( 2 n.sqrt().ceil() ).none( x => n % x == 0 )

fn (
		'primes,
		(limit: int > 2 -> result: Vec<int>),
		range( 2 limit ).filter(is-prime)
)

// Prints prime numbers for which the sum of their digits is also prime
primes(10 ** 4).filter(x => x:digits:sum() | is-prime).print()

// Prints prime numbers that are still prime when their digits are reversed
primes(10 ** 4).filter(x => x.to_string().reverse().to_int() | is-prime).print()

// Prints prime numbers that are also palindromes
primes(10 ** 4).filter(x => x.to_string() | (s => s == s.reverse())).print()
